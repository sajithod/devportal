const{createWriteStream}=require("fs"),path=require("path"),{SitemapStream}=require("sitemap"),{pluginOptionsSchema}=require("./options-validation"),{prefixPath,pageFilter,REPORTER_PREFIX}=require("./internals");exports.pluginOptionsSchema=pluginOptionsSchema,exports.onPostBuild=async({graphql:a,reporter:b,pathPrefix:c},{output:d,query:e,excludes:f,resolveSiteUrl:g,resolvePagePath:h,resolvePages:i,filterPages:j,serialize:k})=>{const{data:l,errors:m}=await a(e),n=await Promise.resolve(g(l)).catch(a=>b.panic(`${REPORTER_PREFIX} Error resolving Site URL`,a));m&&b.panic(`Error executing the GraphQL query inside gatsby-plugin-sitemap:\n`,m);const o=await Promise.resolve(i(l)).catch(a=>b.panic(`${REPORTER_PREFIX} Error resolving Pages`,a));Array.isArray(o)||b.panic(`${REPORTER_PREFIX} The \`resolvePages\` function did not return an array.`),b.verbose(`${REPORTER_PREFIX} Filtering ${o.length} pages based on ${f.length} excludes`);const{filteredPages:p,messages:q}=pageFilter({allPages:o,filterPages:j,excludes:f},{reporter:b});q.forEach(a=>b.verbose(a)),b.verbose(`${REPORTER_PREFIX} ${p.length} pages remain after filtering`);const r=[];for(const l of p)try{const{url:a,...b}=await Promise.resolve(k(l,{resolvePagePath:h}));r.push({url:prefixPath({url:a,siteUrl:n,pathPrefix:c}),...b})}catch(a){b.panic(`${REPORTER_PREFIX} Error serializing pages`,a)}const s=path.join(`public`,d,"sitemap.xml"),t=new SitemapStream({hostname:n}),u=createWriteStream(s);t.pipe(u);for(const l of r)t.write(l);t.end()};