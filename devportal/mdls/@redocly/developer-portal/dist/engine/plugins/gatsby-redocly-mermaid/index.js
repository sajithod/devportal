const path=require("path"),visit=require("unist-util-visit"),fetch=require("node-fetch"),fs=require("fs"),{v4:uuidv4}=require("uuid"),REDOCLY_MERMAID_MICROSERVICE_URL=process.env.REDOCLY_MERMAID_MICROSERVICE_URL||"https://api.redoc.ly/mermaid";function mermaidNodes(a,b){const c=[];return visit(a,"code",a=>{(a.lang||"").toLowerCase()===b&&c.push(a)}),c}async function remoteRender(a,b="default",c){const d=uuidv4(),e=await fetch(REDOCLY_MERMAID_MICROSERVICE_URL,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({definitions:a.map(a=>a.value),rayId:d,theme:b,portalVersion:c})});if(200!==e.status)throw new Error(`Something went wrong during remote rendering. Please, save this Ray ID: ${d} and contact Redoc.ly team.`);const f=await e.json();return f}module.exports=async({markdownAST:a},{language:b="mermaid",theme:c="default"})=>{let d=mermaidNodes(a,b);if(0===d.length)return;const e=getPortalVersion(),f=await remoteRender(d,c,e);for(let e=0;e<d.length;e++)d[e].type="html",d[e].value=f[e]};function getPortalVersion(){try{const a=path.resolve(__dirname,"../../../../package.json"),b=path.resolve(__dirname,"../../../package.json");if(fs.existsSync(a)){const{version:b}=require(a);return b}if(fs.existsSync(b)){const{version:a}=require(b);return a}return null}catch(a){console.log(a)}}