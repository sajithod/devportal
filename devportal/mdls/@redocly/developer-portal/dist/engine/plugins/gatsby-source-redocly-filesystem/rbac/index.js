const path=require("path"),{existsSync,mkdirSync,copyFileSync,lstatSync,readFileSync,readdirSync,writeFileSync}=require("fs"),{parseYaml}=require("@redocly/openapi-core"),queryData=require("./query"),{REDOCLY_CONFIG_DIR}=require("../../../../engine/constants"),GUEST_PERMISSION="guest",PERMISSIONS_FILE_NAME="permissions.rbac.yaml",ROLES_FILE_NAME="rbac.yaml";module.exports={AUTH_CONFIG_FILENAME:path.join(REDOCLY_CONFIG_DIR,"auth.json"),PERMISSIONS_FILE_NAME,ROLES_FILE_NAME,GUEST_PERMISSION,queryData,copyClaimsPreprocessor,getDefaultPermission,getDirectoryPermission,getDirectoriesPermissions,saveSettings,RBACConfig:getRBACConfigCache()};let directoryPermissionsCache={};function isSubfolder(a,b){if(a===b)return!1;const c=path.relative(b,a);return c&&!c.startsWith("..")&&!path.isAbsolute(c)}function getDefaultPermission(a){try{const b=path.resolve(a,ROLES_FILE_NAME),c=parseYaml(readFileSync(b,{encoding:"utf-8"}));return c.defaultPermission||GUEST_PERMISSION}catch(a){return"ENOENT"===a.code||console.log("[error] failed to load rbac.yaml",a),"guest"}}function isRoot(a){return"/"===a||path.dirname(a)===a}function getDirectoryPermission(a,b){if(isSubfolder(path.dirname(a),path.dirname(b))||isRoot(b))return null;if(void 0!==directoryPermissionsCache[b])return directoryPermissionsCache[b];const c=path.join(b,PERMISSIONS_FILE_NAME);if(existsSync(c)){let a=null;try{const{permission:d}=parseYaml(readFileSync(c,{encoding:"utf-8"}));a=d,directoryPermissionsCache[b]=a}catch(a){process.stderr.write(`❌ Could not parse permission data from: ${c}`)}return a}return directoryPermissionsCache[b]=getDirectoryPermission(a,path.resolve(b,"..")),directoryPermissionsCache[b]}function getDirectoriesPermissions(a,b,c="guest",d={}){if(!existsSync(b))return d;const e=readdirSync(b).filter(a=>"node_modules"!==a).map(a=>path.join(b,a)),f=e.filter(a=>!lstatSync(a).isDirectory()),g=e.filter(a=>lstatSync(a).isDirectory()),h=path.join(b,PERMISSIONS_FILE_NAME),i=existsSync(h)?parseYaml(readFileSync(h,"utf-8")):void 0;c=i&&i.permission?i.permission:c;for(const e of f){let b=path.relative(a,e);b.startsWith("static/")?d[b.slice(7)]=c:d[b]=c}for(const e of g)getDirectoriesPermissions(a,e,c,d);return d}function copyClaimsPreprocessor({config:a,configPath:b,publicDir:c}){a.auth&&a.auth.claimsPreprocessor&&existsSync(path.join(b,a.auth.claimsPreprocessor))&&(mkdirSync(path.join(c,REDOCLY_CONFIG_DIR),{recursive:!0}),copyFileSync(path.join(b,a.auth.claimsPreprocessor),path.join(c,REDOCLY_CONFIG_DIR,"claims-preprocessor.js")),a.auth.claimsPreprocessor=`/portal/${REDOCLY_CONFIG_DIR}/claims-preprocessor.js`)}function saveSettings(a,b,c){mkdirSync(path.dirname(a),{recursive:!0}),writeFileSync(a,JSON.stringify(b,null,2),"utf-8"),c.info(`Created ${REDOCLY_CONFIG_DIR}/auth.json in the artifacts dir`)}function getRBACConfigCache(){const a=path.join(__dirname,"../../.cache","rbacConfig.json");let b={};return existsSync(a)&&(b=parseYaml(readFileSync(a,{encoding:"utf-8"}))),b}