const fs=require(`fs-extra`),chokidar=require(`chokidar`),nodePath=require(`path`);exports.copyReferenceDocsOAuth2Redirect=()=>{const a=nodePath.dirname(require.resolve("@redocly/reference-docs/package.json"));fs.existsSync(a)&&(fs.copySync(nodePath.join(a,"dist/oauth2-redirect.html"),nodePath.resolve(`public`,"_auth/oauth2-redirect.html")),fs.copySync(nodePath.join(a,"dist/oauth2-redirect.js"),nodePath.resolve(`public`,"_auth/oauth2-redirect.js")),exports.staticFiles.add(nodePath.resolve(`public`,"_auth/oauth2-redirect.html")),exports.staticFiles.add(nodePath.resolve(`public`,"_auth/oauth2-redirect.js")))},exports.copyStaticDirs=()=>{const a=require("../gatsby-config"),b=nodePath.join(a.siteMetadata.contentDir,`static`);return fs.existsSync(b)?fs.copySync(b,nodePath.join(process.cwd(),`public`),{recursive:!0,dereference:!0,overwrite:!1}):Promise.resolve()},exports.staticFiles=new Set,exports.syncStaticDir=()=>{const a=require("../gatsby-config"),b=nodePath.join(a.siteMetadata.contentDir,`static`);setTimeout(()=>{chokidar.watch(b,{ignored:[/(^|\/)\.#/]}).on(`add`,a=>{const c=nodePath.relative(b,a),d=nodePath.resolve(`public`,c);exports.staticFiles.add(d),fs.copy(a,d)}).on(`change`,a=>{const c=nodePath.relative(b,a),d=nodePath.resolve(`public`,c);exports.staticFiles.add(d),fs.copy(a,d)})},1e4)};