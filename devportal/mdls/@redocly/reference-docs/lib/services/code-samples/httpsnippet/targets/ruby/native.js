"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.info=void 0;var tslib_1=require("tslib"),stringify_object_1=(0,tslib_1.__importDefault)(require("stringify-object")),code_builder_1=require("../../helpers/code-builder"),__1=require("../.."),constants_1=require("../../helpers/constants"),code_helpers_1=require("../../helpers/code-helpers"),utils_1=require("../../../../utils"),indent=1,contentType={X_FORM_URLENCODED:"application/x-www-form-urlencoded",JSON:"application/json",FORM_DATA:"multipart/form-data"};function hasMimeType(e,t){return void 0===e&&(e={}),(0,utils_1.normalizeMimeType)(e.mimeType)===t}var handler=function(e,t,r){var a,s,i,n,o,l=r.target,u=r.client,p=e.method.toUpperCase(),c=null===(a=e.securityOAuth2ExtraCalls)||void 0===a?void 0:a[0],d=(0,tslib_1.__assign)({capitalize:!0,showBoilerplate:!0,indent:"  "},t),h=new code_builder_1.CodeBuilder({indentation:d.indent,variablesPrefix:d.variablesPrefix,capitalize:d.capitalize,lang:constants_1.Lang.RUBY});d.showBoilerplate&&(h.push("require 'uri'").push("require 'net/http'"),"https:"===e.uriObj.protocol&&h.push("require 'openssl'"),(hasMimeType(e.postData,contentType.JSON)||c)&&h.unshift("require 'json'"),h.blank()),Object.keys(e.allHeaders).length&&Object.keys(e.allHeaders).forEach((function(t){e.allHeaders[t]="'"+e.allHeaders[t]+"'"}));var _=p.charAt(0)+p.substring(1).toLowerCase();if(["GET","POST","HEAD","DELETE","PATCH","PUT","OPTIONS","COPY","LOCK","UNLOCK","MOVE","TRACE"].indexOf(p)<0&&h.push("class Net::HTTP::%s < Net::HTTPRequest",_).push("  METHOD = '%s'",p.toUpperCase()).push("  REQUEST_HAS_BODY = '%s'",(null===(s=e.postData)||void 0===s?void 0:s.text)?"true":"false").push("  RESPONSE_HAS_BODY = true").push("end").blank(),c){var b="oAuth2",v=new __1.HTTPSnippet(c).convert(l,u,(0,tslib_1.__assign)((0,tslib_1.__assign)({},d),{variablesPrefix:b,showBoilerplate:!1})),f="oAuth2"+(d.capitalize?"Response":"response");h.push(v).push("access_token = JSON.parse("+f+".body)['access_token']").blank(),e.allHeaders.Authorization='"Bearer " + access_token'}if((0,code_helpers_1.printUrlVariablesDeclarations)(e,h),h.push(h.var("url")+" = URI("+(0,code_helpers_1.buildUrlExpression)(e,h)+")"),Object.getOwnPropertyNames(e.queryObj).length&&(h.push(h.var("params")+" = "+(0,stringify_object_1.default)(e.queryObj,{indent:d.indent,inlineCharacterLimit:25})),h.push(h.var("url")+".query = URI.encode_www_form("+h.var("params")+")")),h.blank().push(h.var("http")+" = Net::HTTP.new("+h.var("url")+".host, "+h.var("url")+".port)"),"https:"===e.uriObj.protocol&&h.push(h.var("http")+".use_ssl = true"),h.blank().push(h.var("request")+" = Net::HTTP::%s.new("+h.var("url")+")",_),Object.keys(e.allHeaders).length&&Object.keys(e.allHeaders).forEach((function(t){e.allHeaders[t]!=="'"+contentType.FORM_DATA+"'"&&h.push(h.var("request")+"['%s'] = %s",t,e.allHeaders[t])})),null==e?void 0:e.postData){var T={};switch((0,utils_1.normalizeMimeType)(null===(i=null==e?void 0:e.postData)||void 0===i?void 0:i.mimeType)){case contentType.X_FORM_URLENCODED:e.postData.params.forEach((function(e){T[e.name]=e.value})),h.push(h.var("request")+".body = URI.encode_www_form("+(0,stringify_object_1.default)(T,{indent:d.indent,inlineCharacterLimit:25})+")");break;case contentType.JSON:h.push(h.var("request")+".body = "+(0,stringify_object_1.default)(e.postData.jsonObj,{indent:d.indent,inlineCharacterLimit:25}).replace(/null/g,"nil")+".to_json");break;case contentType.FORM_DATA:e.postData.params&&(h.push(h.var("form_data")+" = ["),e.postData.params.forEach((function(e){h.push(indent,"['"+e.name+"', '"+e.value+"'],")})),h.push("]")),h.push(h.var("request")+".set_form("+h.var("form_data")+", '"+contentType.FORM_DATA+"')");break;default:(null===(n=e.postData)||void 0===n?void 0:n.text)&&h.push(h.var("request")+".body = "+JSON.stringify(null===(o=e.postData)||void 0===o?void 0:o.text))}}if(e.basicAuth){var O=e.basicAuth,y=O.username,m=O.password;h.push(h.var("request")+".basic_auth('"+y+"', '"+m+"')")}return h.blank().push(h.var("response")+" = "+h.var("http")+".request("+h.var("request")+")").push("puts "+h.var("response")+".read_body").blank(),h.join()};exports.info={key:"native",title:"net::http",link:"http://ruby-doc.org/stdlib-2.2.1/libdoc/net/http/rdoc/Net/HTTP.html",description:"Ruby HTTP client"},exports.default=handler;
//# sourceMappingURL=native.js.map